DataBase Design
$ - Tables

Store
- id        - number    -> Primary key
- bookId    - number    -> Foreign key of Books 
- count     - number


Books
- id        - number    -> Primary key
- title     - string
- price     - number
- authorId  - number    -> Foreign key of Authors


Genres List
- id        - number
- bookId    - number    -> Foreign key of Books
- genreId   - number    -> Foreign key of Genres


Genres
- id        - number    -> Primary key
- genre     - string


Authors
- id        - number    -> Primary key
- name      - string
- country   - string

This is the structure of MySql DataBase 

Relations:
    Store has one to many relation with Books
    Books has many to one relation with Author
    Books has many to many relation with Genres



End Points  

/mysql        -> MySql end point
/mongo        -> MongoDb end point


GET /store
GET /store/id
POST /store
PATCH /store/id
DELETE /store/id


GET /books
GET /books/id
POST /book
PATCH /book/id
DELETE /book/id


GET /author
GET /author/id
POST /author
PATCH /author/id
DELETE /author/id


GET /genre
GET /genre/id
POST /genre
PATCH /genre/id
DELETE /genre/id



FOLDER STRUCTURE
|- src
|   |- interface        -> contains interfaces
|   |- model        
|       |- config       -> configuration for DB
|       |- mongo        -> model of MongoDb
|       |- mysql        -> model of MySql
|   |- routes
|       |- mongo        -> routes of MongoDb
|       |- mysql        -> routes of MySql
|   |- validator        -> contains validation
|   |- app.ts
|   |- server.ts
|- .env
|- package.json
|- tsconfig.json|



MongoDb Design

Store
{
    "id"     : ObjectID("Store")
    "bookId" : ObjectID("Reference to Book document")
    "count"  : number
}

Books
{
    "id"        : ObjectID("Book")
    "title"     : string
    "price"     : number
    "genre"     : string
    "name"      : string
    "country"   : string
}

Genres
{
    "id"    : ObjectID("Store")
    
}


Authors
{
    "id"         : ObjectID("Author")
    "name"       : string
    "country"    : string
}



SELECT *, GROUP_CONCAT(genres_list.genreId) FROM book_store.shops
INNER JOIN books ON shops.id = books.id
INNER JOIN authors ON books.authorId = authors.id
INNER JOIN genres_list ON books.id = genres_list.bookId
INNER JOIN genres ON genres_list.genreId = genres.id
GROUP BY  genres_list.bookId;


-- SELECT * FROM book_store.shops
-- INNER JOIN books ON shops.id = books.id
-- INNER JOIN authors ON books.authorId = authors.id
-- LEFT JOIN genres_list ON books.id = genres_list.bookId
-- LEFT JOIN genres ON genres_list.genreId = genres.id;

-- SELECT * FROM genres_list;
-- RIGHT JOIN genres ON genres.id = genres_list.genreId;
-- INNER JOIN authors ON books.authorId = authors.id
-- LEFT JOIN genres_list ON books.id = genres_list.bookId
-- LEFT JOIN genres ON genres_list.genreId = genres.id;


SELECT  * , GROUP_CONCAT(genres.genre) as "genre"  FROM book_store.shops
INNER JOIN books ON shops.id = books.id
INNER JOIN authors ON books.authorId = authors.id
INNER JOIN genres_list ON books.id = genres_list.bookId
INNER JOIN genres ON genres_list.genreId = genres.id
GROUP BY  books.id;





